1、闭包 closure
    将组成函数的语句和这些语句的执行环境打包在一起时，得到的对象称为闭包
    说明：如果一个内嵌函数访问的外部嵌套函数作用域的变量，则这个函数就是闭包
    闭包必须满足以下三个条件：
        必须有一个内嵌函数
        内嵌函数必须引用外部函数中的变量
        外部函数返回值必须是内嵌函数
    实例：闭包的演示
    def make_power(y):
        print("y的值是：", y)
        def f(x):
            return x ** y  # <<<---注意此处的y为外部嵌套函数内的y
        return f
    pow2 = make_power(2)
    print(pow2(5))

    应用场景：
        1.使用闭包代替全局变量
        2.函数外或在其他函数中访问某一函数内部的参数
        3.在函数执行之前为要执行的函数提供具体参数
        4.在函数执行之前为函数提供只有在函数执行或引用时才能知道的具体参数
        6.暂停执行
        7.包装相关功能


2、函数式编程（函数式一等公民）functional programming
    函数式编程是指用一系列函数解决问题
        1、函数本身可以赋值给变量，赋值后变量绑定的是函数
        2、允许将函数本身作为参数传入另一个函数
        3、允许函数返回一个函数
    函数式编程的好处：
        每一个函数完成细小的功能，一系列函数的任意组合可以完成大问题
        函数仅接受输入并产生输出，不包含任何可能影响输出的内部状态
    函数的可重入性：
        当一个函数，调用时参数一定时，结果一定的函数称为可重入函数
    说明：可重入函数一定不能访问除局部变量外的变量
        y = 2
        def mypow(x):  # 此函数为不可重入函数
            return x**y
        print(mypow(5))
        y = 3
        print(mypow(5))
        def mypow(x, y):
            return x**y


3、高阶函数：High Order function
    什么是高阶函数，满足下面两个条件之一的就为高阶函数：
        1、函数接受一个或多个函数作为参数传入，
            实例：
                def fn():
                    print("hello world!")

                def f2(f):
                    f()  # f绑定了fn，调用f 相当于调用了fn
                    print("hello everbody!")

                f2(fn)  # 调用f2函数，传入fn函数

            实例：
                def myf(iterable, f):
                    m = f(iterable)
                    return m
                L = [1, 3, 5, 7, 9]
                print("L的和是：", myf(L, sum))
                print("L的最大值是：", myf(L, max))
                print("L的最小值是：", myf(L, min))

        2、函数返回一个函数
            实例：
                def get_op():
                    s = input("输入您要做的操作：")
                    if s == "求最大":
                        return max
                    elif s == "求最小":
                        return min
                    elif s == "求和":
                        return sum
                L = [2,4,6,8,10]
                print(L)
                f = get_op()
                print(f(L))

    Python 内建的高阶函数：reduce, map, filter, sorted
        reduce 函数: 在 Python3 中，reduce() 函数已经被从全局名字空间里移除了，它现在被放置在 fucntools 模块里，
                    如果想要使用它，则需要通过引入 functools 模块来调用 reduce() 函数：
            reduce(func(x,y), lst)，其中func必须有两个参数。每次func计算的结果继续和序列的下一个元素做累积计算。
        实例：
            from functools import reduce

            def add(x,y):
                return x + y

            print (reduce(add, range(1, 101)))  # 5050

        map 函数：
           map(func, *iterable), 用函数对可迭代对象中的每一个元素作为参数
              计算出新的可迭代对象，当最短的一个迭代器完成迭代后结束
        实例：
            def power(x):
            	return x**2
            L = []
            mit = map(power, range(1, 10)) #返回一个新的可迭代对象，此可迭代对象可以生成一系列的平方
            for x in mit:
            	L.append(x)
            print(L)
            # 等价于以上5行
            L = [x for x in map(power, range(1, 10))]
            print(L)

            # 生成一个可迭代对象，此可迭代对象可以生成1**4，2**3，4**1
            def mypow(x, y):
            	return x ** y
            L = [x for x in map(mypow, range(1, 5), range(4, 0, -1))]
            print(L)

        练习：
            1、求1**2 + 2**2 + 3**2 + .......+9**2的和，用函数式编程
              def fun(x):
              	return x**2
              print(sum(map(fun, range(1, 10))))

            2、求1**3 + 2**3 + 3**3 + .......+9**3的和，用函数式编程
              print(sum(map(lambda x:x**3, range(1, 10))))

            3、求1**9 + 2**8 + 3**7 + .......+9**1的和，用函数式编程
              print(sum(map((lambda x, y: x**y), range(1, 10), range(9,0,-1))))

            4、有一个字符串，s = "ABCDEFG" 和数字L = [1, 2, 3, 4, 5, 6, 7]
              生产一个列表：L2 = ['A1', 'B2', 'C3',.......]
              s = "ABCDEFG"
              L = [1, 2, 3, 4, 5, 6, 7]
              def fun(x, y):
              	return x+str(y)
              L2 = []
              for x in map(fun, s, L):
                  L2.append(x)
              print(L2)

    filter 函数
        格式：filter(function or None, iterable)
        作用：筛选可迭代对象iterable中的数据，返回一个可迭代对象，此可迭代对象将对iterable进行筛选
            函数function将对每一个元素求值，返回值为真的元素
        实例：
            def isodd(x):
                return x % 2 == 1
            #生产奇数的列表
            odds = [x for x in filter(isodd, range(10))]

        练习：
            1、生成1-20之间所有的偶数的列表
                def isodd(x):
                    return x % 2 == 0
                # 生产偶数的列表
                odds = [x for x in filter(isodd, range(20))]
                print(odds)

            2、用函数式编程，生产1-100以内所有素数的列表，L = [2, 3, 5, 7, 11, ....., 97]
                def prime(x):
                    for i in range(2, int(x**0.5 + 1)):
                        if x % i == 0:
                            return False
                    else:
                        return True
                primes = [x for x in filter(prime, range(2, 100))]
                print(primes)

    sorted 函数
        作用：将原可迭代对象的数据进行排序，生成排序后的列表
        格式：sorted(iterable, key=None, reverse = False)
        声明：iterable可迭代对象
              Key 函数式用来提供一个值，这个值作为排序的依据
              reverse 标志用来设置是否降序排序
        实例：
            L = [5, -2, -4, 0, 3, 1]
            L2 = sorted(L)
            L3 = sorted(L, key = abs)
            names = ['Tom', 'Tyke']
            L4 = sorted(names) #['Jerry', 'Spike', 'Tom', 'Tyke']
            # 让names按字符串的长短进行排序
            L5 = sorted(names, key = len) #['Tom', 'Tyke', 'Jerry', 'Spike']

        练习：
            names = ['Tom', 'Jerry', 'Spike', 'Tyke'] 将列表按照字符串的反转后的顺序为依据进行排序
            names = ['Tom', 'Jerry', 'Spike', 'Tyke']
            def fun(k): # 此函数内一定只有一个参数，此函数用于绑定元素，并返回此元素的排序依据
            	  return k[::-1]
            L5 = sorted(names, key = fun)

        练习：# L列表中，存储书名，价钱和页数
            L = [{"name":Python基础教程, "price":58, "pages":866},
            {"name":C语言, "price":98, "pages":982},
            {"name":C++语言, "price":56, "pages":1024},
            {"name":Java, "price":79, "pages":691}
            ]
            按价钱排序，然后输出顺序（升序）
            按页数排序，然后输出顺序（升序）
        答案：
            L = [{"name":"Python", "price":58, "pages":866},
            {"name":"C", "price":98, "pages":982},
            {"name":"C++", "price":56, "pages":1024},
            {"name":"Java", "price":79, "pages":691}
            ]
            def fun(x):
            	return x['price']
            L6 = sorted(L, key = fun)
            def show_books(lst):
            	for x in lst:
            		print("%10s %3d %5d" % (x['name'],x['price'],x['pages']))
            show_books(L6)


4、递归函数：（recursion function）
    函数直接或间接的调用自身（效率不高，递归有深度限制，所以慎用递归）

    编写递归函数时，必须告诉它什么时候停止递归。正因如此，每个递归函数都有两个部分：基线条件和递归条件。递归条件指的是函数调用自己，
    而基线条件指的是函数不再调用自己，从而避免形成无限循环。

    实例：
        # 直接调用
        def f():
            f() #调用自己
        f() #调用此函数

        # 间接调用
        def fa():
            fb()
        def fb()
            fa()
        fa()

    以上两种形式的调用时递归，并无法返回
    说明：递归一定要控制递归的层数（深度），当符合某一条件时要终止递归调用，当进入更深层递归时问题规模都要有所减少，几乎所有的递归都能用while循环来代替
    递归的实现方法：先假设函数已经实现
    实例：
        import time
        def f(n):
          	if n <= 0:  # 当n条件满足时终止调用终止自己，来终止递归调用
          		  return
          	time.sleep(0.5)
          	print("进入函数时：", n)
          	f(n-1)
          	print("退出函数前：", n)
        f(3)  # 调用函数


练习：
    1、写一个函数，用递归方式打印1-10的数字
    2、写一个函数，用递归方式打印10-1的数字
    答案：
        import time
        def f(n):
          	print(n)
          	time.sleep(1)
          	if n >= 10: #设置返回条件
          		  return
          	f(n+1)
        f(1)

练习：写一个函数sum_n,用递归来实现 n+(n-1)+(n-2)+....+3+2+1 的和
    答案：
        def sum_n(n):
        	if n == 1 :
        		return 1
        	return n + sum_n(n - 1)
        print(sum_n(10))

递归的案例：文件搜索（查找）
思考：有一列表L = [[2,4[6,8],[10]],0,[1,2,3,[7,9]]]
写一个函数，要求把列表中的每个数字打印出来，且每个数字只打印一次
If type() == int
    这是整数
if type() == list
    x是个列表

练习：
    1、编写程序，用递归实现阶乘myfac(x)返回x的阶乘
    答案：
        def fact(x):
            if x == 1:
                return 1
            else:
                return x * fact(x - 1)

        print(fact(5))

    2、写程序，算出1-20的阶乘的和: 1！+ 2！+ 3！+4！+ 5！+…………+20！
    答案:
        def fun(x):
            if x == 1:
                return 1
            return x * fun(x-1)

        print(sum(map(fun, range(1, 21))))

