 1、OSI网络模型:
    网络信息传输比较复杂需要很多功能协同，将功能分开，降低耦合度，让每个模块完成一定的功能。将这些模块按照一定的顺序组合，完成功能，调理清晰。
    按照规定功能，顺序排列的体系结果：就是OSI模型

    7层模型:
        应用层 ----> 表示层 ---> 会话层 ---> 传输层 ---> 网络层 ---> 链路层 ---> 物理层
        应用层：提供用户服务，例如处理应用程序、文件传输、数据管理
        表示层：做数据的转换和压缩、解压、加密等
        会话层：决定了进程间的连接建立，选择使用什么养的传输协议
        *传输层：建立网络连接，提供合适的连接传输服务，提供流量控制
        网络层：控制分组传输，进行路由选择，网络互联
        链路层：提供链路交换，具体的数据收发
        物理层：物理硬件，具体的传输条件和传输接口

    实际操作：四层模型
        应用层：应用层、表示层、会话层
        传输层：传输层
        网络层：网络层
        物理链路层：链路层、物理层

    协议：通信的计算机双方必须遵守的约定，只有遵守相同的约定，计算机之间才能进行通信
        TCP/IP 协议族：
        应用层：TFTP NFS FTP(21) SMTP DNS(53) Telnet HTTP(80) HTTPS(443)
        传输层：TCP UDP
        网络层：IP ARC ICMP
        物理层：IEEE


2、网络基础内容补充：
    主机：主机名称 localhost表示本机的主机  IP来表示某一台网络主机
    如何查看当前主机：
        In [1]: import socket
        In [2]: socket.gethostname()
        Out[2]: 'zhuangyongzhengdeMacBook-Pro.local'

    解析服务器主机名转化为数字地址（IP）：
        In [3]: socket.gethostbyname('localhost')
        Out[3]: '127.0.0.1'

    IPV4 如：192.168.1.2
        点分十进制（三个点分成4个部分）每个部分取值范围0-255 转换成二进制占8位，共占32位
        IPV6 可用的IP地址更多

    ifconfig 命令：查看IP
        127.0.0.1  用于本机网络测试的IP地址
        0.0.0.0  局域网内可用IP
        192.168.1.0   c类IP网段
        192.168.1.1   表示一个网段的网关
        192.168.1.255 表示一个网段的广播地址
        2-254 分配给各个主机
        ping hostname : 检测与某台机器的连通性

    通过地址访问某台主机
        In [6]: socket.gethostbyaddr("66.249.71.15")
        Out[6]:
        ('crawl-66-249-71-15.googlebot.com',   主机名
         ['15.71.249.66.in-addr.arpa'],        别名
         ['66.249.71.15'])                     ip地址

    IP 地址转化为二进制
        点分十进制转换为二进制
            In [8]: socket.inet_aton('192.168.1.2')
            Out[8]: b'\xc0\xa8\x01\x02'
        二进制转化为十进制
            In [11]: socket.inet_ntoa(b'\xc0\xa8\x01\x02')
            Out[11]: '192.168.1.2'

        功能同inet_aton、inet_ntoa。但是第一个参数可以传入socket.AF_INET6 用来转换为ipv6地址
            In [12]: socket.inet_pton(socket.AF_INET, '192.168.1.2')
            Out[12]: b'\xc0\xa8\x01\x02'
            In [14]: socket.inet_ntop(socket.AF_INET, b'\xc0\xa8\x01\x02')
            Out[14]: '192.168.1.2'

    端口号：是地址的组成部分，用于在一个系统中区分应用层程序，端口是不允许重复的
        * TCP 和 UDP 端口号独立
        端口号的使用：1-255 是众所周知的端口，256-1023是系统占用端口，已登记可用端口1024-49151，动态或者私有端口49152-65535
        端口范围1-65535， 在系统中的使用不允许重复，自己写的程序用 > 10000 是保险的
        In [15]: socket.getservbyname('mysql')    检测应用程序的端口号
        Out[15]: 3306

    子网掩码：与IP共同使用，确定当前网段
        子网掩码与IP地址按位与得到网段，过滤子网

    域名解析  DNS
        字节序
            小端序：低序字节存在低地址位
            大端序：高序字节存在低地址位
            网络字节序：将规范统一，把数据咋传输过程都转变成网络字节序，解析时也按照网络字节序解析（大端序）
        In [19]: socket.ntohl(8)            将32位网络字节序数字转换成本机字节序
        Out[19]: 134217728
        In [21]: socket.htonl(134217728)    将32位本机字节序数字转换成网络字节序
        Out[21]: 8
        同上，只是用来转换为16位数
        In [23]: socket.htons(8)
        Out[23]: 2048
        In [24]: socket.ntohs(2048)
        Out[24]: 8

    socket 套接字：
        在Linux/Unix的文件类型：b(块设备文件)c(字符设备文件)d(文件夹)-(普通文件)l(链接文件)s(socket)p(管道文件)
        套接字分类：
            流式套接字（SOCK_STREAM）传输层使用tcp协议进行传输，提供一个面向连接的，可靠（数据无差错、无重复、无失序、无丢失）的传输服务，数据的传输以字节流的方式传输，长度无限制
            数据报套接字（SOCK_DGRAM）  传输层使用udp协议进行传输，提供一个无连接的，不保证可靠的，数据以包的形式独立传输
            原始套接字（SOCK_RAW）


3、面向连接和面向无连接
    tcp通信方式使用的是面向连接的方法
        作用：保证后续的连接持续，建立主机之间的持续连接通路，是可靠的前提条件
        实现方法：通过三次握手实现连接，通过四次挥手实现连接的断开

    udp通信方式是无连接的方法
        作用：数据的收发前不需要连接，效率更高。数据发送形式上更加随意

    基于TCP的网络通信
        适用情况：对传输质量要求较高，需要可靠的传输。数据量较大的情况，通常使用TCP传输。如：QQ消息、传输文件、邮件发送、账户登陆/注册
        tcp连接的建立和断开：
        建立连接（三次握手）
            1、客户端向服务器发起连接请求（问是否让连接），发送syn报文并发送序列号sep=x
            2、服务器接受到客户端连接请求，进行确认（允许连接）返回syn+ack报文，并确认序号
            3、客户端收到回应，进行连接建立
        断开连接（四次挥手）
            1、主动方发送报文告知要断开连接
            2、被动方返回报文给主动方，告知收到通知，进行断开准备
            3、被动方准备就绪，告知主动方可以断开
            4、主动方发送报文确认断开连接


4、TCP 传输控制协议编程流程
    socket ----> bind ----> listen ----> accept ----> send/recv ----> colse
                                     ^                                  |
                                     |                                  |
                                     |                                  |
                                      ----------------------------------
    import socket
    # 服务器端
    # 1、创建套接字
    sockfd = socket.socket(socket.family=socket.AF_INET, socket_type=socket.SOCK_STREAM, proto=0)
    # 功能：创建网络套接字
    # 参数：socket_family:地址簇类型，AF_INET（常用） ipv4的网络地址族，AF_UNIX 本地地址组
           socket_type:套接字类型，SOCK_STREAM 流式套接字，SOCK_DGRAM 数据报
           proto:默认是零
    # 返回值：生成的套接字

    # 2、绑定服务器IP和端口
    sockfd.bind((host, port))
    # 功能：当定主机与元组
    # 参数：是一个元组，元组包含两个元素，第一个为host第二个为port

    # 3、将套接字设置为监听套接字
    sockfd.listen(num)
    # 功能：将套接字设置为可监听的套接字（tcp套接字），并建立监听队列
    # 参数num：监听队列大小

    # 4、等待接受客户端连接请求
    connfd, addr = sockfd.accept()
    # 功能：阻塞等待客户端连接请求
    # 返回值：connfd：新的套接字用来和客户端收发信息
             addr：连接的客户端的地址信息

    # 5、接受客户端的信息
    data = connfd.recv(buffer)
    # 功能：接受客户端消息
    # 参数：设定接受缓冲区大小
    # 返回值：接受到的内容
    *阻塞函数，当接受缓冲区内有内容时会阻塞
    *如果正在recv阻塞，此时连接端退出，recv会立即终止阻塞返回空

    # 6、发送信息给客户端
    n = connfd.send('[%s] recv [%s]' % (ctime(), data).encode())
    # 功能：将message发送给对方
    # 参数：要发送的能容
    # 返回值：发了多少字节内容
    *当向一个不存在的套接字发送内容的时候会造成管道破裂的异常发生
    *补充：send 和sendall()
    *基本一样，只不过sendall是一次性发送完数据，发送成功返回None，失败抛出异常

    # 客户端
    # 1、客户端的套接字的类型必须与服务器一致
    sockfd = socket.socket(socket.family=socket.AF_INET, socket_type=socket.SOCK_STREAM, proto=0)
    # 2、连接服务器
    socket.connect((host, port))
    功能：连接服务器
    参数：服务器的IP和端口组成的元组


写一个简单的文件服务器
    server端
    client端
    1.先运行server
    2、运行client的时候有一个简单的提示界面
    3、实现功能：1、list
               2、get file
               3、put file
               4、quit
    * 确定技术路线
      通信使用socket套接字  tcp通信
      并发性：可以提供多个客户端请求
             循环服务器
      客户端发送请求
      list：服务器读取文件列表发送给客户端打印
      get、put：读取 发送 ------> 接受写入
      * 注意：粘包


5、tcp 的粘包现象及处理方法
    指的是发送方发送若干数据包的时候，因为tcp以数据流的方式进行发送导致数据连接在一起，从缓冲区接受后数据紧挨着前面的数据，如果是大文件组成部分，则不需要处理。
    但是如果是若干不相干的内容，本意是需要分别发送接受，那么就需要粘包问题。

    处理粘包问题
    1、数据格式化，规定数据的发送的格式化，可以规定字节数等或者以什么结尾
    2、发送时连同数据长度一起发送，在接收端进行数据的解析
    3、每次发送中间有一个短暂的间隔，等待接收端接受上次的消息
    4、在客户端接受到第一个数据的时候向服务端发送一个确认信息，服务器在第二次发送数据的时候先接受客户端发来的确认信息


6、UDP 用户数据报协议通信
    # 1、创建数据报套接字
    sockdf = socket(AF_INET, SOCK_DGRAM, 0)

    # 2、绑定本机地址
    sockdf.bind(ADDR)

    3、接受数据
    data, addr = sockdf.recvfrom(BUFFERSIZE)
        功能：用于数据报套接字，接受消息
        参数：每次接受消息的大小
        返回值：data 接受到的消息
               addr 发送端的地址
    4、发送数据
    sockdf.sendto(data, addr)
        功能：数据报套接字发送消息
        参数：data 要发送的消息 bytes格式
             addr 要发送给谁 它的地址
        返回值：发送的字节数

    tcp和udp的区别
        1、tcp是有连接的，udp是无连接的
        2、tcp连接过程有三次握手和四次挥手，而udp没有
        3、tcp数据传输是使用字节流的方式，而udp使用数据包
        4、tcp会产生粘包的现象，而udp不会
        5、tcp传输对资源要求高，udp资源要求少更适合实时性传输
        6、tcp传输保证可靠性而udp不保证
        7、tcp需要listen accept ，udp不需要
        8、消息的收发，tcp使用recv send，udp使用recvfrom sendto
        9、tcp recv在数据流中持续接受消息，会随连接断开而结束阻塞。而udp recvfrom不会


7、套接字属性
    s = socket.socket()
    s.fileno()
        功能：获取套接字的文件描述符
             每个套接字对象都对应内核中的一个数字，即文件描述符，这个数字就好像进程的PID一样，是系统自动分配的，而且不会重复

    connfd.getpeername()
        功能：打印connfd代表的客户端信息

    s.getsockname()
        功能：获取当前套接字的addr

    s.setsockopt(level, optname, value)
        功能：设置套接字选项
        参数：level：要设置的选项层级
                   *SOL_SOCKET：基本套接字设置
                   IPPROTO_IP：IPV4接口设置
                   IPPROTO_IP6：IPV6接口设置
                   IPPROTO_TCP：设置tcp接口
             optname：根据第一个形参，选择具体的选项
             value：根据第二个参数的期望值进行设定

    实例：端口重用
        在创建socket 套接字后加入：
        s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)

    s.getsockopt(level, optname)
        功能：获取选项值
        参数：level 要获取的选项大类
             option 具体的选项
        返回值就是获取到的值


服务端
    C/S   B/S
    软件、硬件

    软件服务器特征
        1、在后端，能够提供一定的逻辑处理，解决前段（客户端）的请求和需求
        2、一般能够进行数据的运算等处理（和数据库或者文件的交互）
        3、服务端程序一般生命周期较长
        4、服务端程序一般可以应对多个客户的请求和连接

    循环服务器模型
        tcp循环服务器
            1、需要建立连接
            2、如果处理短请求，可以满足多个客户端需求，但是需要频繁的创建断开连接，效率太低
            3、如果处理长请求，则一个请求没有完成，无法继续获取下一个客户连接请求，通常不适合
        udp循环服务器
            1、不需要建立连接
            2、如果是短请求可以迅速完成。
            3、处理长请求仍然需要一定的时间，当客户端量非常大的时候也会产生不好的用户体验

    并发服务器模型
    解决问题：解决了服务器同一时刻只能处理一个客户端请求，一旦客户端长期占有服务器，无法继续获取下一个客户连接请求,造成阻塞
    方法：每当有一个客户端连接（或者发起请求），即创建一个进程/线程 去处理客户端的具体事件，同时不影响新的客户端连接请求。多用于tcp并发
        1、创建套接字 socket() bind() listen()
        2、准备接受客户端请求 accept
        3、没有一个客户端连接 就建立一个新的进程完成客户端请求内容（子进程 close掉监听套接字）
        4、父进程继续等待其他客户端连接请求（父进程close掉客户端套接字）

    多线程并发服务器
        1、创建套接字 socket bind listen
        2、准备接受客户端连接请求
        3、每有一个客户端连接就创建一个线程完成具体客户端请求
        4、主线程不断接受客户端连接请求

    sys.argv :
        表示从命令行传入内容，形成一个列表list，列表的第一项是执行程序本身
        列表从argv[1]开始为参数的每一项，用空格分割
        如果参数中含有空格，则用引号起来
        传入的参数均被当作字符串

    socket 并发服务器集成模块
        python2 SocketServer
        python3 socketserver

     'ForkingUDPServer' == 'ForkingMixIn' + 'UDPServer'
     'ForkingTCPServer' == 'ForkingMixIn' + 'TCPServer'

     'ThreadingTCPServer' == 'ThreadingMixIn' + 'TCPServer'
     'ThreadingUDPServer' == 'ThreadingMixIn' + 'UDPServer'

    组合：多进程tcp服务器
     'StreamRequestHandler', 'ForkingMixIn', 'TCPServer',
         多线程tcp服务器
     'StreamRequestHandler', 'ThreadingMixIn', 'TCPServer',

         多进程udp服务器
     'DatagramRequestHandler', 'ForkingMixIn', 'UDPServer',
         多线程udp服务器
     'DatagramRequestHandler', 'ThreadingMixIn', 'UDPServer',


IO 介绍
    把内存中数据的交换操作都可以称之为IO操作。比如：文件的读写，向终端的输入、输出，和网络信息的交互
    IO 操作和cpu计算不同，因为需要数据的交互，所以速度较慢。对于一个程序来说，如何更好的解决IO传输速率往往决定着执行效率

    IO 分类
        阻塞IO 、非阻塞IO 、IO多路复用 、异步IO 、事件驱动IO

    阻塞IO：（效率低）
    默认情况下就是阻塞IO（input recv、 recvfrom、 put、 get）
        1、条件等待：因为不满足某种条件，使进程处于等待态。当条件被触发时即结束阻塞状态，如：recv等
        2、拷贝阻塞：数据交换过程中需要通过读写行为来达到目的（设备文件的读写、磁盘的速写、网络读写），这个读写行为是通过内核来实现的，且需要一定的时间，这个时间也是属于一种阻塞，称之为拷贝阻塞（不可避免）

    解决方法：
        针对条件阻塞：将阻塞条件变为非阻塞，不再等待条件达成 ----- 非阻塞IO
        针对拷贝阻塞：在内核处理IO操作的时间里，应用层程序不进行等待，而是继续执行自己的任务，等到内核IO结束会告诉应用层，此时在进行应用层的IO处理 ----- 多路复用、异步、信号驱动、时间驱动

        将监听套接字变为非阻塞，则accept不再阻塞
        sockfd.setblocking(0)
        将客户端连接套接字变为非阻塞，则recv不再阻塞
        sockfd.setblocking(0)

    IO 多路复用
        win ---> select
        unix、linux ---> select poll epoll

        1、同时监督多个IO事件
        2、当检测的IO事件被触发时返回相应事件进行处理
        3、当检测的IO事件都没有准备好，可以选择阻塞等待（也可以使用非阻塞的模式）
        4、IO多路复用在内核中实际时一种轮循状态，需要消耗资源。但是相对阻塞等待来说非常高，但是不是真正的异步


    select 实现IO多路复用
        from select import select
        rs, ws, es = select(rlist, wlist, elist, [timeout])
        功能：分组监听关注的IO事件 阻塞函数，当所监听的IO事件准备就绪时返回
        参数：rlist：列表内是要处理的IO事件
             wlist：列表内是下一步要操作的IO事件
             elist：列表内是要异常处理的IO事件
             [timeout]：超时时间，在规定时间内如果仍然不满足结束阻塞条件，则不在等待
        返回值：三个关注类表中至少有一个列表当中的一个事件准备就绪，就会返回
        rs：是一个列表 对应rlist中准备就绪的IO事件
        ws：是一个列表 对应wlist中准备就绪的IO事件
        es：是一个列表 对应elist中准备就绪的IO事件


    poll 实现IO多路复用
        from select import poll
        p = poll()  # 生成poll对象
        p.register(s)  # 注册关注IO事件
        events = p.poll([timeout])  # 阻塞等待关注事件的发生
        功能：等待注册的事件准备就绪
        参数：超时时间
        返回值：list of (fd, event) 2-tuples
               fd：对应io对象的文件描述符
               event：对应IO对象什么事件准备好了
               POLLIN  POLLOUT  POLLERR  POLLUP(断开连接)  POLLPRI(紧急处理)  PPLLVAL(无效数据)
        相当于  rlist   wlist    elist

    epoll
    效率比poll和select高
    程序编写一般poll近似
    也是IO多路复用的方式
    有水平触发和边缘触发两种模式


协程（轻量级的线程，又称之为纤程）
    是一个用户态的轻量级线程，实际上只有一个单线程完成

    优点：
        创建协程资源消耗非常少
        由于写成的特点可以用于IO高并发的处理
        无需上下文切换的开销
        没有临界资源的争夺，保证对数据的原子操作（不可再分的操作）

    缺点：
        无法使用多核
        一旦出现条件阻塞会影响整个程序的运行

    多进程+协程
        第三方库
            greenlet
            sudo pip3 install greenlet

            gevent
            sudo pip3 install gevent


http(超文本传输协议)
    用途：互联网中网站的数据传输
         按照http协议所规定的格式的数据的传输
    特点：1、支持客户端服务器模式
         2、灵活，简单，快速
         3、几乎支持任意格式的数据传输
         4、无状态，不记录任何用户信息
         5、http1.0是无连接的  http1.1 支持持久连接
         6、传输层使用TCP协议

    发起http请求
    请求行    GET /index.html HTTP/1.1
           请求方法 请求内容    协议版本
        请求方法：GET 获取url（统一资源定位符）所表示的资源
                POST 提交一定的数据以获取服务端的返回
                HEAD 获取url标识的资源的报头
                PUT  获取服务器的一个存储资源
                DELETE 删除url所标识的服务器资源
                TRACE 测试
                CONNECT 保留
                OPTIONS 查询服务器资源和信息
    请求报头 ： 是对请求的具体要求和描述 如：Host：www.baidu.com
    【空行】
    请求正文 ： 发送get参数，或post提交内容

    响应http请求
    响应行：http/1.1   200   OK
            版本信息  响应码  提示
          响应码：1XX  ：提示信息，表示请求已经被接受，正在处理
                 2XX  ：访问已经成功
                        200 OK
                 3XX  ：重定向 完成任务需要进一步的操作
                 4XX  ：客户端错误
                        400 客户端语法错误  401 请求没有授权  403 服务器受到请求，拒绝执行  404 请求资源不存在
                 5XX  ：服务器端错误
                        500 服务器发生不可预期错误
                        503 服务器暂时不能处理，可能一段时间后可以


基于python的http模块
    self的属性
    client_address : 得到客户端address
    command ：客户端请求类型
    path ：请求路径
    request_version ：http版本
    headers ：得到头变量内容
    rfile、wfile ：两个流，分别为获取请求内容和返回响应内容
    send_response() ：发送响应码
    send_header() ：发送http响应头
    end_headers() ：发送空白行

    超时检测
        使用 settimeout 函数，将套接字设置为超时套接字，在规定时间没有连接则不再等待，会产生time out异常
        e.g.: sockfd.settimeout(3)  # 设置超时时间为3秒
        设置超时检测的好处：
        1、防止长期的死等待，浪费时间
        2、可以更好的做效率的衡量
        坏处：有可能错过事件的发生

    其他的超时检测：select poll 队列中get put 进程中join 等都有超时检测机制

    广播
        发送数据，使用一个网段内的用户都能收到
        广播使用udp套接字
        每个网段的最大地址为该网段的广播地址，用来发送和接受广播数据
        大量的使用广播会造成广播风暴，大量的消耗带宽，影响网络通畅

    本地套接字通信
        用于本地进程间的通信

