1、自定义模块
    模块是以文件为单位的程序组，通常是以.py文件后缀结尾
    默认的模块导入路径时当前程序执行路径

    import 语句的搜索路径
        sys.path
        import 模块名 # 去哪儿找“模块名.py”这个文件

    导入路径的搜索顺序：
        1、搜索程序的运行时路径（当前路径）
        2、sys.path 提供的路径
        3、索引内建模块
    sys.py是一个字符串列表，每个字符串是一个路径
    实例：import sys
        sys.path.append("/User/zyz/py_learn")
        import mymod # 成功


2、PYTHONPATH环境变量
    此环境变量的值会自动添加到sys.path列表中
    1、Unix/Linux下设置PYTHONPATH环境 (此方法只适用于Unix/Linux，且只对执行此命令的终端有效)
        用法：在终端内执行export命令可以设置环境变量
        $ export 环境变量=值 #注意 = 两端没有空格
        实例：$ export PYTHONPATH="/User/zyz/py_learn"

    2、Windows下设置PYTHONPATH环境
        右键点击计算机-->属性-->高级系统设置在系统属性对话框-->高级-->环境变量......


3、模块化编程
    优点：
        1、有利于多人合作开发
        2、使代码更加易于维护
        3、提高代码的复用率
        4、有助于解决函数名和变量名冲突问题（模块内的变量的作用域为模块内全局）

    模块的加载过程：
        1、先搜索相关的路径，找到模块对应的.py文件
        2、判断是否有此模块对应的.pyc文件，如果.pyc文件不存在，则重新编译.py文件生成.pyc文件
        3、如果.pyc文件存在，则根据.py文件和.pyc 文件的修改时间判断，是否要重新生成.pyc文件
                      编译              解释执行
            primes.py ----> primes.pyc -------> python3
        4、加载并执行.pyc

        注：
            1、在模块导入时，模块内所有语句会执行
            2、如果一个模块已经被导入时，不会重新执行模块内的语句


4、模块的属性：
    模块的 __name__属性：
    作用：1、__name__属性用来记录模块的名字
         2、用来判断是否为主模块（程序最先运行的模块）
    说明：1、当此模块为主模块时，__name__ 绑定 '__main__'
         2、当模块不是主模块时，__name__ 绑定 .py的文件名
    if __name__ == "__main__":  判断自身是否是主模块，用于过滤被import的模块多余的语句
        语句块

    模块的隐藏属性：
        模块中以下划线开头，不以双下划线结尾的属性，在from xxx import * 语句导入时，
        将不被导入，通常称这些属性为隐藏属性

    模块中的 __all__ 列表 (一般写在__init__.py 文件中)
    作用：用来记录此包中有哪些子包或模块需要导入，当用 from xxx import * 语句导入时，只导入__all__ 列表内的属性
    说明：__all__列表是一个用来存放可导入属性的字符串列表
    实例：
        """
        文件 allattr.py
        用from allattr import *
        """
        __all__ = ["hello", "name1"]

        def hello():
            pass

        def _hello(): # 此函数将在from import * 语句中不被导入
            pass

        def __hello():
            pass

        name = "aaa"
        name1 = "bbbb"


5、模块的文档字符串：
    在模块内，第一个没有赋值给任何变量的字符串为文档字符串
    文档字符串用模块的__doc__属性绑定
    __file__属性：用于记录模块所在的绝对路径
    用help(模块名)来查看
    __name__属性


6、包 package
    包是将模块以文件夹的组织形式进行分组管理的方法
    作用：将一系列模块进行分类管理，有利于防止命名冲突
         可以在需要时加载一个或部分模块而不是全部模块
    包实例：mypack/
               __init__.py
               menu.py
               games/
                   __init__.py
                   contra.py
                   supermaio.py
                   tanks.py
               office/
                   __init__.py
                   excel.py
                   word.py
                   powerpoint.py


7、包的导入：
   三种导入语句：
        import xxx
        from xxx import yyy
        from xxx import *
   语法：
        import 包名 [as 包别名]
        import 包名.模块名 [as 模块新名]
        import 包名.子包名.模块名 [as 模块新名]

        from 包名 import 模块名 [as 模块新名]
        from 包名.子包名 import 模块名 [as 模块新名]
        from 包名.子包名.模块名 import 变量名 [as 变量名]

        from 包名 import *
        from 包名.子包名 import *


8、__init__.py 文件
    __init__.py 是常规包内必须存在的文件
    __init__.py 会在包加载时被自动调用

    作用：1、在内部填写文档字符串
         2、在内部可以加载此包所依赖的一些模块(一般不在这里加载子包)


9、包的相对导入语法
    from 相对路径或模块 import 属性或者模块名或 from 相对路径包或者模块名 import *
    注：只能在from xxx import 语句中使用相对导入
    相对路径：
        . 代表当前目录
        .. 代表上一级目录
        ... 代表上两级目录
        .... 以此类推
        注：相对导入时不能超出包的外部范围

    包的加载路径的设置方法与模块的设置方法相同
        1、可以设置sys.path
        2、可以设置PYTHONPATH环境变量


练习：
    1、写一个函数 def get_max_min(iterable):
        传入一个可迭代对象，把此可迭代对象的最大值和最小值用return语句一次性返回
        （最大在前，最小在后）
        da, xiao = get_max_min([5,8,3,6])
        print("最大值是：", da)
        print("最小值是：", xiao)
        (可以用max内建函数)
    答案：
        L = [5, 8, 3, 6]
        def get_max_min(L):
            return max(L),min(L)
        da, xiao = get_max_min(L)
        print(da)
        print(xiao)

