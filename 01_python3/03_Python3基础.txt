
3、字符串 str
    print("hello world!")
    作用：用来记录文本信息

    字符串字面值的表示方法：在非注释中凡是用引号括起来的部分都是字符串
        '    单引号
        "    双引号
        '''  三单引号
        """  三双引号

      1、空字符串的字面值表示方法：
          ''
          ""
          ''''''
          """"""
          注：空字符串的布尔测试值bool(x)为Flase

      2、非空字符串的字面值表示的方法：
          'hello'
          "hello"
          '''hello'''
          """hello"""

      3、字符串构造（创建）函数
          str(obj)   将对象转换为字符串

      4、单引号和双引号的区别：
          单引号内的双引号不算字符串结束符
          反之也成立，
          双引号内的单引号不算字符串结束符

      5、三引号字符串：
          """, '''开头和结尾的字符串
          作用：
              1、三引号字符串可以包含单个的单引号和双引号
              2、三引号字符串中的换行会自动转换为换行符 (所见即所得)

          例如：
              # 想通过一个print函数打印如下三行文字：
              welcome to beijing
              I like Python
              I am studing⋯⋯

              print("welcome to beijing\nI like Python\nI am studing⋯⋯")
              print('''welcome to beijing
              I like Python
              I am studing⋯⋯''')

      6、隐式字符串字面值拼接
            s = "I'm"   'a teacher.'   'my name is "zhuangyongzheng"'
            print(s)

            I'ma teacher.my name is "zhuangyongzheng"

            print("I'm"
            "a teacher."
            "my name is 'zhuangyongzheng'")


4、用转义序列代表特殊字符
    字符串字面值中，常用反斜杠 \ 后跟一些字符来表示特殊字符
    \'   代表单引号
    \"   代表双引号
    \a   响铃
    \c   不再产生新的输出
    \e   转义符
    \f   换页
    \n   代表换行符
    \\   代表一个反斜杠
    \r   返回光标至行首
    \t   水平制表符
    \v   垂直制表符
    \b   倒退
    \0   空字符，字符值为零
    \0oo oo为两位八进制表示的字符
    \xXX XX为两位十六进制表示的字符 ASCII（0-256）
    \uXXXX  Unicode 16 的十六进制表示的字符 （0-65535）
    \UXXXXXXXX  Unicode 32 的十六进制表示的字符

    文字是什么？
        ASCII编码：
        python 中查看ASCII字符表：man ascii


5、raw 字符串（原始字符串）
    格式：
        r'字符串内容'
        r"字符串内容"
        r'''字符串内容'''
        r"""字符串内容"""
        repr('s')   返回s的原始字符串
    作用：让转义符号 \ 无效
    实例：
        >>> print(r'\\\\\\')    # \\\\\\
        >>> path = r'C:\newfile\test.py'
        >>> print(path)    # C:\newfile\test.py


6、常用的ASCII编码：
    字符：     十进制     十六进制
    '0'          48          0x30
    'A'          65          0x41
    'a'          97          0x61
    len()函数可以返回字符个数

    练习：
        试想一下，如下字符串有几个字符组成
        'abcd1234'        8
        '5\'4"'           4
        '\"A\x34\o56'     7
        '\bc\td\n'        5


7、字符串的运算：（计算出来的字符串不支持隐式拼接）
    运算符：
    +   +=   *   *=

    + 加号  用于字符串的拼接
        例如：
            a = "ABCD"
            b = "EFG"
            c = a + b
            print(c)

    += 用于原字符串与右侧字符串拼接生成新字符串，同时用原变量绑定
        实例：
            x = 'abcd'
            y = '123'
            x += y    # x = x + y
            print(x)

    * 生成重复的字符串
        实例：
            x = "ABCD" * 3
            print(x)   # ABCDABCDABCD
            print(3 * "12")   # 121212

    *= 生成重复的字符串，并改变变量的绑定关系
        实例：
            x = '123'
            x *= 4
            print(x)    # 123123123123
            y = 2
            y *= "ABC"
            print(y)    # ABCABC


8、字符串的比较运算
    运算符：
    <   <=   >   >=   ==   !=
    实例：
        "ABC" < "ABD"     # True
        "A" < "B"         # True
        "ABC" > "AAC"     # True
        "AD" >= "ABC"     # True
        "ABC" > 'abc'     # False
        "ABCD" != "DCBA"  # True
        'abc' != 'ABC'    # True
        "100" > "50"      # False


9、in / not in 运算符
    用于序列，字典，集合等容器中，用于判断某个值是否存在于这个容器，not in 与 in 运算符的返回结果相反
    格式：对象 in 序列 (字符串本身就是序列)
    实例：x = "welcome to china!"
        'to' in x                   # True
        'zhuangyongzheng' in x      # False
        'zhuangyongzheng' not in x  # True


10、Python 所有运算符的优先级
    **              指数（幂运算）
    ~   +   -       按位取反，正号，负号
    *   /   //   %  乘，除，地板除，取余
    +   -           加减法
    <<   >>         左移，右移
    &               位与
    ^               位异或
    |               位或
    <   <=   >   >=   ==   !=   is,   is not,   in,   not in
    not             布尔非
    and             布尔与
    or              布尔或
    if-else         条件表达式


11、字符串的索引操作：
    索引 index
        Python 的字符串是不可以改变的字符序列

    语法：
        字符串 [整数表达式]

    说明： 1、序列都可以用索引（index）为访问序列中的对象
          2、序列的正向索引是从0开始的，第二个索引为1，⋯⋯最后一个索引是len(s)-1
          3、序列的反向索引是从-1开始的，-1代表最后一个，-2代表倒数第二个，以此类推，第一个是 -len(s)
          4、python中有六种内建序列：列表、元组、字符串、Unicode字符串、buffer对象和range对象
          5、序列的通用操作：索引、切片、加、乘、in/not in、len、max、min


12、切片 slice
    从字符串序列中取出相应的元素重新组成一个字符串序列，原字符串不变

    语法：
        s[(开始索引):(结束索引)(:(步长))]
        注：小括号() 括起来的部分代表可省略

    说明：
        开始索引是切片切下的起始位置，0代表第一个元素，1代表第二个元素⋯⋯
        结束索引是切片的终止点（但不包含终止点）
        步长是切片获取完当前元素后移动的方向和偏移量：
        1、没有步长，相当于取值完成后向有移动一个索引的位置（默认为1）
        2、当步长为整数时，去正向切片，步长代表下一次索引取值的增长值
        3、当步长为负整数时，取反向切片  注：反向切片时，默认的起始位置为最后一个
            元素，终止位置为第一个元素的前一个位置

    实例：
        s = "ABCDE"
        a = s[1: 4]   # BCD
        b = s[1: 5]   # BCDE  等同于s[1:]
        c = s[: 2]    # AB
        d = s[: ]     # ABCDE
        e = s[1: 1]   # ''空
        f = s[3: 1]   # ''空
        g = s[0: 5: 2] # ACE
        h = s[4: : -2] # ECA
        i = s[3: : -2] # DB
        j = s[: : -1]  # 反转

    练习：
        输入任意一个字符串，判断这个字符串是否是回文

        答案：
            a = input("请出入字符串：")
            b = a[: : -1]
            if a == b:
                print("输入的字符串是回文！")
            else:
                print("输入的字符串不是回文！")


13、字符串编码转换函数
    ord('c')   返回一个字符的Unicode数值
    chr(i)     返回i这个数值所对应的字符


14、整数转换为字符串的函数
    bin(i)   将整数转换为二进制字符串
    oct(i)   将整数转换为八进制字符串
    hex(i)   将整数转换为十六进制字符串


练习：
    1、输入一行字符串，打印这个字符串第一个字符，中间字符，和最后一个字符都是什么？如果输入的字符为偶数，则中间字符输入用"|" 表示
        s = input("请输入一行字符串：")
        a = len(s)

        print(s[0])
        print(s[-1])

        if a % 2 == 0:
            print("|")
        else:
            print(s[a // 2])

    2、写一个程序，输入一段字符串，如果字符串不为空，则把第一个字符的编码打印出来
        s = input("请输入字符串：")
        a = len(s)

        if a != 0:
            print(ord(s[0]))
        else:
            print("字符串为空！")

    3、写一个程序，输入一个整数值（0-65535），打印这个整数值所对应的字符
        n = int(input("0 - 65535: "))

        if n in range(0, 65536):
            print(chr(n))

