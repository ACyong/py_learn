1、列表的 in/not in 运算符（一定用在容器内）
    作用：判断一个元素是否存在于列表中，如果存在则返回True，否则返回False
         和字符串的in运算符规则相同
    语法：对象 in 列表
    实例：L = [None, True, 3.14, 10, 1+2j, "hello"]
         3.14 in L  　# True
         "3.14" in L  # False
         10.0 in L    # True（如果两个值能比较，只比较值得大小，与类型无关）
         5 not in L   # True （等同于 not(5 in L)）


2、列表的索引操作：
    语法： 列表[整数表达式]
    用法： 等同于字符串索引
          索引分为正向索引(从0开始)和反向索引(从-1开始)，规则与字符串完全相同
    实例：L = [1, 2.3, "Four"]
         print(L(1))


3、列表的索引赋值m（与字符串不同，字符串是不能被改变序列，所有没有索引赋值）
    列表是可变的，可以通过索引赋值改变列表的元素(修改列表)

    实例：L = [1, 2.2, 3.14, "Four"]
         L[1] = 2    # L = [1, 2, 3.14, 'Four']
         L[-1] = 4
         L[-2] = 3


4、列表的切片 slice （取值操作）
    列表[:]
    列表[::]
    列表的切片规则等同于字符串切片的规则
    实例：L = [1, 2.2, 3.14, "four", "五", "陆"]
         L1 = L[::2]   # [1, 3.14, "五"]

    列表的切片赋值操作：
    作用：改变原列表，可以插入（不切出元素，为空）、替换（切出元素，对应替换）
         和删除（切出元素赋值为空）列表中的元素
    语法：列表[切片] = 可迭代对象
    说明：切片赋值时，切片切出块数大于1时(步长大于1)，切片块数必须与可迭代
         对象取出数据的个数相同（添加）
    实例：L = [2, 3, 4]
         L[0: 1] = [1.1, 2.2]  # [1.1, 2.2, 3, 4]
         L[2: ] = [3.3, 4.4, 5.5]  # [1.1, 2.2, 3.3, 4.4, 5.5]
         L[: ] = [3, 4]    # [3, 4]
         L[0: 0] = [1, 2]  # [1, 2, 3, 4]
         L[4: ] = [5, 6]   # [1, 2, 3, 4, 5, 6]
         L[6: ] = "AB"     # [1, 2, 3, 4, 5, 6, 'A', 'B']
         L[8: ] = range(7, 10)   # [1, 2, 3, 4, 5, 6, 'A','B', 7, 8, 9]
         L[0: 1] = []      # 删除下表为0的元素
    切片步长大于1的切片赋值：（替换）
    L = [1, 2, 3, 4, 5, 6]
    L[::2] = "ABC"   # ['A', 2, 'B', 4, 'C', 6]


5、del语句（用于删除列表的元素）
    实例：L = [0, 1, 2, 3, 4, 5, 6]
         del L[0]   # L = [1, 2, 3, 4, 5, 6]
         del L[::2] # L = [2, 4, 6]

    练习：已知有列表：L = [3, 5]
         将原列表变为：[1, 2, 3, 4, 5, 6]
         将原列表反转，删除最后一个元素后打印此列表：[6, 5, 4, 3, 2]
         >>> L = [3, 5]
         >>> L[0: 0] = [1, 2]
         >>> L
         [1, 2, 3, 5]
         >>> L[3: 3] = [4]
         >>> L
         [1, 2, 3, 4, 5]
         >>> L[6:] = [6]
         >>> L
         [1, 2, 3, 4, 5, 6]
         >>> L[:] = L[::-1]
         >>> L
         [6, 5, 4, 3, 2, 1]
         >>> del L[-1]
         >>> L
         [6, 5, 4, 3, 2]


6、常用的列表方法（method）
    假设列表对象为L
        L.index(v[, begin[, end]])   返回对应元素的索引下标，begin为开始索引，end 为结束索引，当v值不存在时，触发ValueError错误
        L.insert(insex, obj)   将某个元素插放到列表指定位置之前
        L.count(x)     返回列表中元素的个数
        L.remove(x)    从列表中删除第一个出现在列表中的值
        L.append(x)    在列表中追加一个任意类型的元素
        L.extend(list) 向列表追加另一个列表（将list列表中的元素分别追加到原列表中）
        L.clear()      清空列表，等同于L[:] = []
        L.sort(reverse-False)   将列表中的元素进行排列，默认按值从小到大的顺序排列，reverse-True 按从大到小顺序排列
        L.reverse()     列表的反转，用来改变原列表的先后顺序
        L.pop([索引])    删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素的引用关系
        L.copy()   复制此列表（只复制一层，不会复制深层对象），L1 = L.copy()相当于 L1 = L[:]


7、判断一个对象在内存地址的函数：
    id(obj)   返回对象的内存地址

    思考：L1 = [1, 2, 3]
        print(id[L1])    # 对于可变对象 += 变量绑定的对象不变，对于不可变对象 += 变量重新绑定新的对象
        L1 += [4]
        print(id(L1))
        # 与
        L2 = [1, 2, 3]
        L2.append(4)
        # 与
        L3 = [1, 2, 3]
        L3.extend([4])


8、浅拷贝与深拷贝
    浅拷贝 （shallow copy）：浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程
    实例：L = [3.1, 3.2]
          L1 = [1, 2, L]
          L2 = L1.copy()   # 浅拷贝 等同于 L2 =L1[:]
          L2[2][0] = 3.14
          print(L1)   # [1, 2, 3.14, 3.2]
          print(L2)   # [1, 2, 3.14, 3.2]
    深拷贝 deep copy（列表中有可变对象才需要考虑是否要用深拷贝）
    实例：import copy   #导入copy模块
          L = [3.1, 3.2]
          L1 = [1, 2, L]
          L2 = L1.deepcopy()   #浅拷贝 等同于 L2 =L1[:]
          L2[2][0] = 3.14
          print(L1)   # [1, 2, 3.1, 3.2]
          print(L2)   # [1, 2, 3.14, 3.2]


9、字符串文本解析方法split() 和 join()
    字符串切分：假设字符串为S
        partition(sep)、rpartition(sep)、splitlines([keepends])、split([sep[, maxsplit]])、rsplit([sep[, maxsplit]])
        *partition() 函数族接受一个字符串参数，并返回一个3 个元素的元组对象，如果 sep 没出现在母串中，返回值是(S, ",")，否则，
                     返回值的第一个元素是 sep 左端的部分，第二个元素是 sep 自身，第三个元素是 sep 右端的部分。
                     rpartition 和 partition 的细微区别在于前者从目标字符串的末尾也就是右边开始搜索分割符。
        split() 函数族的参数 maxsplit 是切分次数，即最大的分切次数，所以返回值最多有 maxsplit+1 个元素
        splitlines() 按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符

    注：对于字符串 S，s.split() 和 s.split('') 的返回值是不相同

        用可迭代对象中的字符串，返回一个中间用S进行分割的字符串

        实例：s = "Beijing is capital"
              L = s.split(" ")    # L = ['Beijing', 'is', 'capital']

              '\\'.join(["C:", "Programe Files", "Python3"])

    练习：1、有字符串“hello”， 生成“h e l l o”和“h-e-l-l-o”
             s = ' '.join("hello")
             s2 = '-'.join("hello")

         2、有一些数，存于列表中，如：L = [1, 3, 2, 1, 6, 4, 2, 7, 99] 要求将列表中只出现一次的元素存入到另一个列表L2中？
             for x in L:
                if L.count(x) == 1:
                    L2.append(x)


10、列表推导式 list comprehension
    作用：用可迭代对象生成列表
    语法：[表达式 for 变量 in 可迭代对象]
          或
          [表达式 for 变量 in 可迭代对象 if 真值表达式]
    实例：# [1, 4, 9, 16, 25, 36, 49, 64, 81]
          L = []
          for x in range(1, 10):
              L.append(x**2)
          # 以下用列表推导式生成新列表
          L = [x**2 for x in range(1, 10)]
          注：表达式的变量与循环变量是一个变量
          # 实例生成0-100之间所有计数的列表
          [1, 3, 5, 7, 9, ......., 97, 99]
          L = [x for x in range(100) if x % 2 == 1]

    练习：用列表推导式生成 [2, 5, 10, 4**2+1, 5**2+1, 37, .......]

        L = [x**2 + 1 for x in range(1, 101)]
        print(L)


11、列表推导式的嵌套：
    语法：[表达式1
            for 变量1 in 可迭代对象1 (if 真值表达式1)
            for 变量2 in 可迭代对象2 (if 真值表达式)]
          注：()小括号内容可省

    s = "ABC"
    s2 = "123"
    # 循环来实现
    L = []
    for y in s:
        for x in s2:
            L.append(y + x)
    print(L)

    # 用列表推导式来实现
    L = [y + x
         for y in s
         for x in s2
         ]
    print(L)


练习：
1、生成100个斐波那契数(Fibonacci sequence), fibs = (1, 1, 2, 3, 5, ........)存在列表fibs里并打印

    L = [1, 1]
    for x in range(0, 99):
        s = 0
        s += L[x] + L[x + 1]
        L.append(s)
    print(L)

2、输入Unicode编码的起点值和终点值，打印此范围内的所有字符
    如：请输入起始值：58
    请输入终止值：64
    打印结果如下：
    十进制    十六进制     文字
       48        0x30         0
       49        0x31         1
       50        0x32         2
       ..........

    n1 = int(input("输入开始值："))
    n2 = int(input("输入终止值："))

    print("十进制", "       十六进制", "      文字")
    for x in range(n1, n2 + 1):
        print(x, hex(x), chr(x))

