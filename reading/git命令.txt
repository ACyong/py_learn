基本命令：
	git init  # 初始化git 仓库

	git add  # 添加到暂存区
		<filename> ... 	将哪些文件提交到暂存区
		.	将没有添加到暂存区的文件一起添加进暂存区

	git commit  # 提交到版本库
		-m 'message'	编写提交信息
		-am 'message'	git add 和 git commit -m '' 的结合

	git log  # 提交的日志

	git status  # 仓库的文件状态


分支命令：
	git branch  # 分支操作
		<branchname> ...	创建分支的名字
		-d <branchname> ...	删除分支
		-r 	查看远程分支
		-vv	查看本地分支与远程分支的联系

	git checkout  # 切换分支
		*注：切换分支之前要确保分支是干净的
		<branchname>	切换到哪个分支
		-b <branchname>		创建一个分支并切换到该分支

	git merge  # 合并分支
		*注：合并分支之前先切换到master 分支
		<branchname>	合并哪个分支到主分支上

	git stash  # 储存当前状态，可以切换到其他分支
		*注：项目正在进行中，仓库处于杂乱的状态，不想提交，
		 但是想转到其他分支上进行工作，可以用此命令
		git stash save 'message...'
			可以添加一些注释
		git stash list
			显示保存进度的列表。也就意味着，git stash命令可以多次执行。
		git stash pop [–index] [stash_id]
		git stash pop
			恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。
		git stash pop --index
		 	恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）
		git stash pop stash@{1}
			恢复指定的进度到工作区。stash_id是通过git stash list命令得到的
			通过git stash pop命令恢复进度后，会删除当前进度。
		git stash apply [–index] [stash_id]
			除了不删除恢复的进度之外，其余和git stash pop 命令一样。
		git stash drop [stash_id]
			删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。
		git stash clear
			删除所有存储的进度。


远程命令：
	git config --global user.name "用户名"
	git config --global user.email "电子邮件"

	ssh-keygen -t rsa -C "配置的电子邮件"
		用SSH生成共钥和私钥,把生成的共钥复制到网站响应的key中

	ssh git@git服务器地址
		测试远程git 服务器

	git clone 'git 仓库地址'
		clone 远程仓库

	git push -u [远程仓库名remote-name] [本地推送的分支名local branch-name]
		-u 表示参数建立追踪。这样git status 时会显示本地分支和远程分支的偏离情况

	git push -u [远程仓库名remote-name] --all
		推送本地仓库的所有分支到远程仓库上去

	git fetch 远程仓库名
		从远程仓库抓取数据

	git merge 远程仓库名/分支名
		远程仓库的分支合并

	git remote add 远程仓库名 远程仓库地址
		添加一个远程仓库

	$ git pull <远程主机名> <远程分支名>:<本地分支名>

	比如，要取回origin主机的next分支，与本地的master分支合并，需要写成下面这样 -
	$ git pull origin next:master

	如果远程分支(next)要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写为：
	$ git pull origin next
	上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再执行git merge。

	$ git fetch origin
	$ git merge origin/next
		在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。
		比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，
		也就是说，本地的master分支自动”追踪”origin/master分支。

	Git也允许手动建立追踪关系。
	$ git branch --set-upstream master origin/next
		上面命令指定master分支追踪origin/next分支。
		如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。

	$ git pull origin
		上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”
		(remote-tracking branch)进行合并。
		如果当前分支只有一个追踪分支，连远程主机名都可以省略。


rebase：
	git log
	git rebase -i HEAD~2
	git push origin develop -f


reset：
	根据–soft –mixed –hard，会对working tree和index和HEAD进行重置:
	    git reset --mixed：此为默认方式，不带任何参数的git reset，即时这种方式，
	                       它回退到某个版本，只保留源码，回退commit和index信息
	    git reset --soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。
	                       如果还要提交，直接commit即可
	    git reset  --hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容，此命令 慎用！


	    HEAD 最近一个提交
	    HEAD^ 上一次提交

	    HEAD^ ^ 上一次的 上一次的提交（倒数第三次）

	    HEAD^^^ 倒数 第四次的 提交

	    HEAD~0 最近一个提交
	    HEAD~1 上一次提交

	    HEAD^2 上一次的 上一次的提交（倒数第三次）

	    HEAD^3 倒数 第四次的 提交


git cherry-pick commitId
如果有冲突，解决冲突之后：
git add .
git cherry-pick --continue
