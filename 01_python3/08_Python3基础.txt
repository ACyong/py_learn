1、集合 set
    集合是可变的容器
    集合内的数据对象都是唯一的（不能重复多次）
    集合是无序的存储结构，集合中的数据没有先后关系
    集合内的元素必须是不可变对象
    集合是可迭代对象
    集合是相当于只有键没有值的字典（键则是集合的数据）


2、集合的创建
    创建空的集合
    set()   创建一个空的集合对象

    创建非空集合
    set(iterable)   用可迭代对象差un关键一个新的集合对象
    s = {1,2,3,4,5,6}
    实例：
        s = set()   # s = set(), set() 表示空集合
        s = set(range(10))
        s = {5, 8, 10, 3}
        s = set("ABCDABCABA")   # s = {'C', 'A', 'B', 'D'}
        s = set([5, 6, 7, 8])
        s = set({1:"One", 3:"Three"})
        s = {1, 2, (3.1, 3.2)}
        以下错误：
        s = {1, 2, [3.1, 3.2]}   # 出错，因为列表/字典是可变对象
        s = {1, 2, {1:"One"}}


3、集合的运算：（不改变原集合的运算）
    交集， 并集， 补集， 子集， 超集
    & 生成两个集合的交集
        s1 = {1, 2, 3}
        s2 = {2, 3, 4}
        s3 = s1 & s2    # s3 = {2, 3}

    | 生成两个集合的并集
        s1 = {1, 2, 3}
        s2 = {2, 3, 4}
        s3 = s1 | s2    # s3 = {1, 2, 3, 4}

    - 生成两个集合的补集
        s1 = {1, 2, 3}
        s2 = {2, 3, 4}
        s3 = s1 - s2    #s3 = {1}
        # 补集是指，生成s1除去s1和s2的交集

    ^ 生成两个集合的对称补集
        s1 = {1, 2, 3}
        s2 = {2, 3, 4}
        s3 = s1 ^ s2    #s3 = {1, 4}

    < 判断一个集合是另一个集合的超集
    < 判断一个集合是另一个集合的子集
        s1 = {1, 2, 3}
        s2 = {2, 3}
        s1 > s2   # True
        s1 < s2   # True

    == != 判断集合相同或不同
        s1 = {1, 2, 3}
        s2 = {3, 2, 1}
        s1 == s2   # True
        s1 != s2   # False
    >=  <= 可以使用，判断子集或相同，超集或相同

    in / not in 运算符
        等同于前面所学的in运算符，用于判断一个值是否在集合中

    练习：
        经理有：曹操， 刘备， 周瑜
        技术员：曹操， 周瑜， 张飞， 赵云
        用集合求:1、即使经理又是技术员的有谁？
                2、是经理，但不是技术人员的有谁？
                3、是技术员，不是经理的都有谁？
                4，张飞是经理吗？
                5、身兼一职的人都有谁？
                6、经理和技术员有几个人
    答案:
        managers = {"曹操", "刘备", "周瑜"}
        techs = {"曹操", "周瑜", "张飞", "赵云"}

        print(managers & techs)
        print(managers - techs)
        print(techs - managers)

        if ('张飞' in managers):
            print("张飞是经理")
        else:
            print("张飞不是经理")

        print(managers ^ techs)
        print("%d" % len(managers | techs))


4、可用于集合的函数：
    len(seq)
    max(x)
    min(x)
    sum(x)
    any(x)
    all(x)


5、Python3 中集合常用的方法
    S表示集合
        S.add(e)      # 在集合中添加一个新元素e，如果元素已经存在，则不添加
        S.remove(e)   # 从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError的错误
        S.discard(e)  # 从集合中删除一个元素，但不会发生错误
        S.clear()     # 清空集合
        S.copy()      # 将集合进行一次浅拷贝
        S.pop()       # 从集合S中删除一个随机元素，如果此集合为空，则引发KeyError错误
        S.update(S2)  # 用S与S2得到的并集更新集合S

    集合是可迭代对象,可以用for循环来遍历集合

    练习：任意输入一些英文单词，每次输入一个，当输入零是结束，打印输入的单词的个数（去重），打印每个单词到终端，如：
        ABC
        abc
        ABCD
        abc
        单词个数3
        单词如下：
        abc
        ABC
        ABCD
    答案:
        S = set()

        while True:
            s = input("请输入:")
            if s == "0":
                break
            else:
                S.add(s)

        print(len(S))
        for x in S:
            print(x)


6、集合推到式：
    作用：用可迭代对象创建集合
    语法：{表达式 for x in 可迭代对象 [if 真值表达式]}
    [] 部分可省略
    实例：
        s = {x**x for x in range(1, 10)}
        # 集合推导式不会生成重复的元素
        s = {x for x in "ABCDAAABBBCCD"} 等同于s=set("ABCDAAABBBCCD")


7、固定集合 frozenset
    固定集合是不可变的，无序的，含有唯一元素的集合
    list -----> tuple
    set  -----> frozenset

    作用：固定集合可以作为字典的键，还可以作为集合的值
    创建空的固定集合：
        frozenset()
    创建非空的固定集合
        frozenset(iterable)
    实例：fs = frozenset()
          fs = frozenset([1, 3, 5, 7, 9])   # frozenset({1, 3, 5, 9, 7})
    运算：（等同于set中的用法）
        &   |   -   ^
        <   <=   >   >=   ==   !=
        in   not in
    固定集合的方法：
        相当于集合的全部方法去掉修改集合的方法


8、函数 function
    什么是函数：
        函数是可以重复执行的语句块
    作用：
        可以重复使用，提高代码的重用性
        定义用户级别的函数
    函数定义的def 语句的语法：

    函数定义 def 语句 的语法：
        def 函数名(参数列表)：
            语句块(也叫代码块)

    语法说明：
        1、函数的名字是语句块的名称
        2、函数名必须是标识符（和变量的命名规则相同）
        3、函数名是一个变量（不要轻易对其赋值），函数与变量一样，需要先定义再调用
        4、函数有自己的名字空间，要让函数处理外部数据，需要用参数对此函数传入一些数据
        5、函数如果不需要传入参数，则参数列表可以为空
        6、语句部分不能为空，如果为空则需要填充pass语句
    实例：
        # 定义了一个叫myfun的函数
        def myfun(): （def需要顶格写）
            print("hello world!")
        # 调用myfun函数
        myfun()


9、函数调用
    语法：
        函数名(实际调用传递参数) （实际调用传递参数称为实参）

    练习：写一个函数，def mysum(a, b): ,调用时传入两个数，把两数之和打印出来
    答案:
        def mysum(a, b):
            print("a的值是：", a)
            print("b的值是：", b)
            print("两个数的和值：", a + b)
        mysum(2, 5)

    函数调用的语法说明：
        1、函数调用是一个表达式，如果没有return语句，函数执行完毕后返回None对象
        2、如果函数需要返回其他的值对象，需要用到return语句
    v = sum([1, 2, 3, 4])   # 希望v = 300 需要用到return语句


10、return 语句：
    语法：return [表达式]
        注：[]  代表可以省略
    作用：用于函数中，结束当前函数的执行，返回到调用该函数的地方，同时返回
        一个值对象的引用关系
    说明：
        1、return 语句后跟的表达式可以省略，省略后相当于return None
        2、如果函数内没有return语句，则函数执行完最后一条语句后返回None，
           相当于在最后加了一条return None语句
        3、函数的调用能够用return 语句返回一个对象的引用


练习：
    1、写一个函数mymax，实现返回两个数的最大值
        def mymax2(a, b):
            return a if a > b else b
        print(mymax2(100, 200))

练习：
    1、假设有一个列表有很多数据，还有重复的，打印出列表中的数据，要求
        重复的只打印一次，打印的顺序要以列表中第一次出现的顺序为准
        法1:
            L = [1, 1, 2, 3, 4, 8, 6, 6, 5, 4, 3]
            l1 = []
            s = set()

            for x in L:
                if x in s:
                    continue
                s.add(x)
                l1.append(x)
            print(l1)

      法2:
          L = [9, 8, 4, 6, 8, 9, 4, 1]
          s = set(L)
          L2 = []
          for x in L:
              if x in s:
                  s.remove(x)
                  L2.append(x)
          print(L2)

      法3:
          L = [9, 8, 4, 6, 8, 9, 4, 1]
          L1 = []

          for x in L:
              if x not in L1:
                  L1.append(x)
          print(L1)

    2、定义两个函数：sum3(a, b, c)用于返回三个数的和，pow(x) 用于返回
        返回x的三次方（立方）
        (1)、用以上函数计算 1 的三次方加 2 的三次方加 3 的三次方的和
        (2)、计算1+2+3的立方
            def sum3(a, b, c):
                return (a + b + c)
            def pow(x):
                return x ** 3

            print(sum3(pow(1), pow(2), pow(3)))
            print(pow(sum3(1, 2, 3)))

