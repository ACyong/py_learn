1、异常（基础）exception
    错误：是由于逻辑或语法导致一个程序无法正常运行的问题
    错误的特点：有些错误是无法预知的
    异常：是程序出错时标示的一种状态
    说明：当异常发生时，程序不会向下继续执行，而转去调用此函数的地方，待处理此错误
    作用：通知上层调用者，有错误产生需要处理
         用作信号通知


2、python3 中常用的错误类型：
    ZeroDivisionError 除（或取模）零
    StopIteration 迭代器没有更多的值
    IOError 输入输出操作失败
    ImportError 导入模块失败
    GeneratorExit 生成器发生异常通知退出
    IndexError 序列中没有此索引
    IndentationError 缩紧错误
    ValueError 传入无效的参数
    AssertionError 断言语句失败
    NameError 未声明/初始化对象
    AttributeError 对象没有

    详见：>>> help(__builtins__)


3、try 语句的两种语法：（try:翻译为尝试）
    try-except 语句
    try-finally 语句
    注： except 翻译为“异常”
        finally 翻译为“最终”

    try-except语句语法：
        try:
            可能触发异常的语句
        except 错误类型1 [as 变量1]：
            异常处理语句1
        except 错误类型2 [as 变量2]：
            异常处理语句2
        except 错误类型3 [as 变量3]：
            异常处理语句3
        except ：
            其他异常处理语句
        else：
            未发生异常执行语句
        finally：
            最终执行语句

    作用：捕获异常，将程序转为正常流程
    说明：as 部分可以省略
         except 子句可以有一个或多个，单至少要有一个
         else 子句最多只能有一个，也可以省略不写
         finally 子句最多只能有一个，也可以省略不写

    try-except 捕获异常的流程
        1、except 子句用来捕获和处理当模中类型错误发生时，处理异常
        2、except 子句会根据错误类型进行匹配，如果匹配成功，则程序转入正常状态，并调用处理语句进行处理
        3、如果没有匹配到任何错误类型，则程序的异常状态会继续向上（调用处）传递，至入传入解释执行器后终止程序执行
        4、如果没有异常，则执行else子句中的语句
        5、最后执行finally子句中的语句（一定会被执行）
        6、如果没有相应的错误类型与之匹配，则执行空类型的except子句（except：），之后程序进入正常状态

    try-finally 语句语法：
        try:
            可能触发异常的语句
        finally:
            最终语句
        说明：finally 子句不可以省略，一定不存在except 子句
        作用：通常try/finally 语句用来做触发异常时必须处理的事情，无论异常是否发生，
             finally子句都会被执行
             注：try-finally语句不会改变程序的状态（正常/异常）状态

        案例:
            def fry_egg():
                print("打开天然气！")
                print("开始煎鸡蛋！")
                try:
                    n = int(input("请输入蛋的个数")) # 肯触发异常
                    print("完成煎蛋！， 共煎了%d个鸡蛋" % n)
                finally:
                    print("关闭天然气！")

            fry_egg()


4、raise 语句
    作用：触发一个错误，让程序进入异常状态
    语法：
        raise 异常类型
        或
        raise 异常对象
    实例：
        def make_raise():
            print("start")
            raise ZeroDivisionError("假的零除")
            print("end")

        try:
            make_raise()
        except ZeroDivisionError as err: # err绑定错误对象
            print("出现错误")
            print("错误类型：", err)


5、assert 语句（断言语句）
    assert语法：
        assert 真值表达式, 错误数据(通常是字符串)
    作用：
        当真值表达式为False时， 用错误数据创建一个AssertionError类型的错误，并进入异常状态
    等同于：
        if 真值表达式 == False:
            raise AssertionError(错误数据)
    实例：
        def get_age():
            a = input("请输入年龄：")
            a = int(a) # ValueError错误
            assert a < 150, "年龄太大了"
            assert a > 0, "还没出生"
            return a

        while True: # 循环读入解决NameValue错误
            try:
                # age = 0 # 默认值解决NameValue错误
                age = get_age()
                break
            except AsertiongError as e:
                print("发生年龄值不合法的错误，", e)
            except ValueError as e:
                print("发生输入值不能转为整数的错误", e)

        print("您输入的年龄是：", age)


6、小结：
    try-except 语句：用于捕获异常，将程序转为正常状态，可以有else子句和finally子句（except接受错误通知，且处理）
    try-finally 语句：用于执行一定要执行的语句
    raise 语句：用于程序手动的触发一个错误（发通知，给except语句用）
    assert 语句：用于根据条件触发一个AssertionError错误通知

    python 调试器 pdb模块
    pdb模块的作用：
        控制程序的执行，并跟踪程序的执行流程，在运行时查看变量的值
    使用方法：$ python3 -m pdb 主模块名.py
             (Pdb)


7、pdb 调试命令：
    q/quit 退出pdb调试器
    p/pp 表达式运行表达式并返回结果
    l/list 列表源码
    h/help 查看帮助
    n/next 执行下一行语句
    c/cont/continue 继续执行，直到下一个断点
    b/break [断点位置] 设置断点
    cl/clear 清除断点
    s/step 进入到函数内部执行
    r/return 持续执行，直到此函数返回
    w/where 打印函数调用关系

    设置断点的方法：
    （1）、文件名：行号
          （Pdb) b student_info.py : 3
    （2）、当前文件的行号
           (Pdb) b 20
    （3）、函数名
           (Pdb) b input_student()
    （4）、模块名、函数名
           (Pdb) b game.play


练习：一个球从100米高空降下，每次落地后反弹高度为原高度的一半，再落下
     （1）写程序算出皮球第十次落地后反弹的高度
     （2）打印出球共经历多少米路程
    
    答案:
        def height(h, s):
            l = 0
            for x in range(1,s+1):
                l += (h * 1.5)
                h /= 2
            return h,l
        print(height(100, 10))

练习：写一个函数getscore() 获取学生输入的成绩（0～100），如果输入出现异常，则用
     try-except语句来处理异常并此函数返回0，如果一切正常则返回输入的成绩
        def get_score():
            ....
        score = get_score()
        print("学生的成绩是：", score)
    答案:
        def get_score():
            score = int(input("输入学生成绩:"))
            if score < 0:
                raise ValueError("成绩小于零")
            if score > 100:
                raise ValueError("成绩大于零")
            return score

        while True:
            try:
                score = get_score()
                break
            except ValueError as err:
                print("有错误发生：", err)

        print("学生的成绩是：", score)

