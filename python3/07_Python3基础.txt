1、元组 tuple（不可变序列，不能改变的列表）
   元组是一个不可改变的序列，同list一样，元组可以存放任意类型的元素

   元素的表示方法：
      用小括号括起来 () ，单个元素括起来后加逗号 ',' ，区分是单个对象还是元组


2、元组的创建
    创始空元组
        t = ()

    创建非空元组：
        t = 100,        # 括号可以不加，但逗号必须加
        t = (20,)       # 如果不加逗号 '()' 则表示表达式分组，不会生成元组，还是原类型
        t = (1,2,3)
        t = 300, 200, 100

        s = "hello"
        t = (1, 2, s)   # t = (1, 2, "hello")

    创建空元组的错误实例：
        t = (20)                    # t绑定20这个整数对象，不是元组
        x, y, z = (100, 200, 300)   # 本身是元组，相当与打包后又拆开分别给了各元素对应的变量，属于序列赋值
        x, y, z = [100, 200, 300]   # 生成的是列表
        x, y, z = "ABC"             # 可迭代对象的序列赋值

    元组的构造（创建）函数 tuple
        tuple()           创建一个空元组，等同于 ()
        tuple(iterable)   用可迭代对象生成一个元组


3、元组的运算：
    +   +=   *   *=
    <   <=   >   >=   !=   ==
    in / not in

    规则与列表完全相同
    索引（等同与列表索引，但不能进行索引赋值）   取值
    切片（等同与列表片切，但不能进行切片赋值）   取值

    元组的方法：
    T.index(v[,begin[,end]])   返回对应元素的下标，同list.index在元素不存，在时会触发ValueError错误
    T.count(x)   返回元组中对应元素的个数


4、序列相关的函数（能用于字符串，列表，元组，bytes，bytearray）：
    len(seq)         返回序列的长度
    max(seq)         返回序列的最大值元素
    min(seq)         返回序列的最小值元素
    sum(seq)         返回序列中所有元素的和（元素必须是数值类型）
    any(seq)         真值测试，如果序列中，其中一个值为真值则返回True，否则返回False
    all(seq)         真值测试，如果序列中所有值为真值则返回Ture
    str(obj)         字符串构造（创建）函数，将对象转换为字符串
    list(iterable)   用可迭代对象生成一个列表
    tuple(iterable)  用可迭代对象生成一个元组
    reversed(seq)    返回反向顺序的迭代器对象
    sorted(iterable, reverse = False)   排序可排序的对象，返回一个已排序的新列表

    实例：L = [1, 2, 3, 4, 5, 6, 7]，用L生成一个元组为（7, 6, 5, 4, 3, 2, 1）
        set(L.reverse())

    练习：输入一段字符串，把字符串按Unicode值从小到大排列后组成新的字符串：
        输入：BACED   <回车>
        输出：ABCDE
    答案：
        s = input("输入：")
        L = sorted(s)
        # print("".join(L))
        out_str = ''
        for x in L:
            out_str += x
        print("输出", out_str)


5、字典 dict：
    什么是字典：
        1、字典是一种可变的容器，可以存储任意类型的数据
        2、字典中每个数据都是用"键"(key) 进行索引的，不像序列（字符串，列表，元组）可以用下标来索引，键不能是可变的，值可以是任意类型
        3、字典的数据没有先后顺序关系，字典的存储是无序的
        4、字典中的数据以键(key)-值(value)对的形式进行存储
        5、字典的键不能重复（键是唯一的），且只能用不可变类型作为字典的键

    字典的字面值表示方法：
        以{}括起来，用":" 分隔键值对，各键值对用逗号分隔

    创建空字典：
        d = {}   #空字典

    创建非空字典：
        d = {"name": "weimingze", "age": 35}
               键  :   值
        d = {1: "one", 2: "two",3: 3.3333}
        ########以下是错的#######
        d = {[1, 2, 3]: "ABC"}   # 可变类型不能做字典的键
        d = {1: "one", 1: "yi"}   # 键冲突，只保留最后一个

    构造函数创建字典
        dict()   创建空字典
        dict(iterable)   用可迭代对象创建一个字典
        dict(**kwargs)   用关键字传参来创建一个字典

    实例：
        d = dict()
        d = dict([(1, 2), (3, 4), (5, 6)])
        d = dict([(1, 2), (3, 4), "AB", [5, 6]])
        d = dict(name = "weimingze", age = 35)   # 只有这样赋值的时候键不能是数字

    可变类型不能充当字典的键
        列表list，字典 dict，集合 set，字节数组 bytearray


6、字典的基本操作：
    字典的键索引语法：字典[键]
    作用：通过键获取键所对应的值
    实例：
        d = dict(name = "tarena", age = 15)
        print(d['name'])   # tarena

    添加和修改字典的元素：
        语法：字典[键] = 对象
        实例 = {}
        d['name'] = "tarena"
        d['age'] = 15   # 创建新的键-值对
        d['age'] = 16   # 修改原键"age" 所对应的值
        d[2008] = '润年'
        d[3.14] = {"pi":3.1415926}
        说明：键不存在，则创建键值对，键存在，则修改键绑定的值
              键存在，则修改键绑定的值

    删除字典的元素 del 语句
    del 语句（删除变量，删除列表中的元素，删除字典的键值对）
        del 字典[键]   # 注意键的类型

    in/not in 运算符（字典的成员资格运算符）
        可以用 in 运算符来判断一个键是否存在于字典中
        not in 与 in 返回结果相反

    实例：
        d = {'name':'tarena', 'age':15}
        "name" in d   # 返回True
        15 in d       # 返回False
        'tarena' not in d   # 返回True

    字典的迭代访问：
        字典是可迭代对象，字典只能对键进行迭代访问
        d = {1:"One", 2:"Two", "三":"tree"}
        for k in d:
            print(k)


7、可以用于字典的内建（build-in）函数
      len(x)   返回字典的键值对个数
      max(x)   返回键的最大值
      min(x)   返回键的最小值
      sum(x)   返回字典中所有键的和
      any(x)   真值测试（针对所有的键）
      all(x)   真值测试（针对所有的键）

    字典的方法：
        D代表字典
        D.clear()   清空字典
        D.pop(key[,default])   移除键，同时返回此键对应的值，如果没有 key，返回 default 值
        D.copy()   返回字典D的副本，只复制一层（浅拷贝）
        D.item()   将字典的键值对以元组的方式形成一个列表
        D.update(D2)  将字典D2合并到D中，如果键相同，则此键的值取D2的值作为新值
        D.get(key, default)   返回键key所对应的值，如果没有此键，则返回default
        >>> help(dict) 查帮助

    练习：输入一段字符串，打印出这个字符串中出现过字符及出现过的次数
        如：请输入：abcdabcaba
        打印结果如下：
        a : 4
        b : 3
        d : 1
        c : 2
    答案：
        s = input("请输入：")
        d = {}

        for ch in s:
            if ch in d:
                d[ch] += 1
            else:  # ch不在字典中，加入字典
                d[ch] = 1
        print(d)
        for k in d:
            print("%s : %d" % (k, d[k]))


8、字典推导式：
    使用可迭代对象依次生成字典内的键值对的简单方式
    语法：{键表达式:值表达式 for 变量 in 可迭代对象 [if真值表达式]}
    注：[] 的内容代表可省略
    实例：要想生成一个字典，键为数字(1-10)，值为键的平方
        {1: 1, 2: 4, 3: 9, .......}
        d = { x : x**2 for x in range(1, 10)}
        d = { x : x**2 for x in range(1, 10) if x % 2 == 1}

    字典推导式可以嵌套
        语法如下：
            {键表达式:值表达式
                for 变量1 in 可迭代对象1 [if 真值表达式1]
                for 变量2 in 迭代对象2 [if 真值表达式2]
            }

    练习：有字符串列表如下：
        L = ['tarena', 'xiaozhang', 'hello']
        生成如下字典：
        d = {'tarena': 6, 'xiaozhang': 9, 'hello': 5}
    答案：
        L = ['tarena', 'xiaozhang', 'hello']
        D = {k: len(k) for k in L}
        print(D)

    字典(无序) vs 列表(有序)：
        1、都是可变对象，可以实现：增删改
        2、索引方式不同，列表，用整数索引，字典用键索引
        3、字典的增删改查的速度可能会快于列表（重要）
    实例： L = [1, 6, 3, 3, 7, 8, 6, 4, 10]
        10 in L
        d = {1: None, 6: None, ........ 10: None}
        10 in d


练习：已知有两个列表：Nubers = [1001, 1002, 1003, 1004]，names = ['Tom', 'Jerry', 'Spike', 'Tyke']
    要生成一个字典：d = {1001:'Tom', 1002:'Jerry',.....}
答案：
    Nubers = [1001, 1002, 1003, 1004]
    names = ['Tom', 'Jerry', 'Spike', 'Tyke']
    D = {Nubers[x]: names[x] for x in range(len(Nubers))}

练习：把判断一个数是否为素数的算法，改用while循环
答案：
    x = int(input("请输入一个整数："))
    if x == 1:
        print(x, "不是素数")
    else:
        i = 2
        while i < x:
            if x % i == 0:
                print(x, "不是素数！")
                break
            i += 1
        else:
            print(x, "素数")

练习：
    1、用while语句，实现如下功能：
        把1-100之间的数（包含100）中的奇数添加到一个列表odds中，
        把偶数添加到一个列表evens中，打印两个列表
    答案：
        odds = []
        evens = []
        i = 1
        while i <= 100:
            if i % 2 == 1:
                odds.append(i)
            else:
                evens.append(i)
            i += 1
        else:
            print(odds)
            print(evens)

    2、猴子吃桃子问题：
        有一只小猴子，摘了很多桃。第一天吃了一半，感觉不饱又吃了一个
        第二天又吃了剩下的一般，感觉不饱又吃了一个
        ..........
        以此类推
        到第十天，发现只剩下一个了，请问第一天摘了多少桃子
    答案：
        s = 1
        i = 1
        while i < 10:
            s = (s + 1) * 2
            i += 1
        else:
            print(s)

    3、完全数：
        1+2+3=6
        1*6=6
        2*3=6
        1，2，3都为6的因数
        完全数是指除自身以外的所有因数之和相加等于自身的数求四个完全
        数并打印
        6   28   496   8128  33550336
    答案：
        n = 2
        while n < 1000000000:
            i = 2
            s = 1
            j = 1
            while i < n:
                if n % i == 0:
                    s += i
                i += 1
            else:
                if s == n:
                    print(n)
            n += 1


C++ 中的map是用红黑树实现的

