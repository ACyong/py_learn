1.概念:
    数据结构：如何使用内存存储数据
    算法：解决常见问题的方法


2.数据之间的关系：2个方面来理解
    逻辑关系：数据与数据直接的逻辑结果，描述的是数据和数据直接的关系，和计算级的存储没有关系
        集合关系、
        线性关系(1对1)：使用索引把数据串联起来
        树型结构(1对多)：一个数据有多个分支
        图型结构(网状结构、多对多)：任意两个数据之间有直接的联系，任何一个数据都可以

    物理关系：
        顺序结构：数据在内存中存储在连续位置
        链式结构：把内存中相互独立的存储区使用一定的结构串联起来


3.算法的特征：
    输入：0个或者是多个输入
    输出：至少有一个输出
    有穷性：算法执行有限次之后结束，不能出现死循环，每一步的执行都在人可承受的范围内
    确定性：算法中的每一步都有确定的含义，不能出现二义性
    可行性：每一步都是可以执行的，执行有限次后结束


4.算法的效率：
    程序执行的时间不是判断算法效率的最好方法，原因是不客观（计算机硬件环境+软件环境）
    O复杂度表示法:
        算法的执行效率：在规模上或者是数量级上的比较
        所有的代码的执行时间 T(n)与每行代码的执行次数 n 成正比,总结公式如下:
            T(n) = O(f(n))
            大 O 表示法表示代码执行时间随数据规模增长的变化趋势,
            所以在分析一个,一段代码的时间复杂度的时候,
            也只关注循环执行次数最多的那一段代码就可以了.

    时间复杂度分析：
        1.只关注循环执行次数最多的一段代码
        2.加法法则:总复杂度等于量级最大的那一段代码的复杂度
        3.乘法法则:嵌套代码的复杂度等于嵌套内外代码复杂度的乘积
        注:
            顺序操作：加法法则
            循环操作：乘法法则
            分支操作多个分支的时间复杂度最大的数据

        例如:
            函数执行的次数：
            1+2+3                O(1) 常数阶
            3*n*2 + 3*n+1        O(n) 线性阶
            3*logn + 2*n +1      O(n) 线性阶
            n**3 +n              O(n**3) 立方阶

        常见的时间复杂度有:
            O(1) < O(logn) < O(n) < O(nlogn) < O(n**2) < O(n**3) < O(2**n) < O(n!)
            复杂度的量级大致可以分为两种:多项式量级和非多项式量级
            非多项式量级有两种: O(2**n) 和 O(n!) 这种复杂度被称为非多项式量级的算法问题(NP)

            注: 如果代码的复杂度由两个数据规模来决定,并且无法事先评估 m 和 n 谁的量级大,在表示时间复杂度时,
                不能简单的利用加法法则,省略掉其中一个

    空间复杂度分析:
        表示算法的存储空间与数据规模之间的增长关系,跟时间复杂度分析一样
        常见的空间复杂度有 O(1) O(n) O(logn) O(nlongn)


5.分析算法，需要考虑：最好的情况、最坏的情况、平均的情况
    复杂度分析的4个概念
        最坏情况时间复杂度：
            代码在最理想情况下执行的时间复杂度。

        最好情况时间复杂度：
            代码在最坏情况下执行的时间复杂度。

        平均时间复杂度：
            用代码在所有情况下执行的次数的加权平均值表示。

        均摊时间复杂度：
            在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，
            个别情况是高级别复杂度且发生具有时序关系时，
            可以将个别高级别复杂度均摊到低级别复杂度上。
            基本上均摊结果就等于低级别复杂度。

    为什么要引入这4个概念？
        同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，
        更准确的描述代码的时间复杂度，所以引入这4个概念。

        代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度。
        大多数情况下，是不需要区别分析它们的。

    如何分析平均、均摊时间复杂度？
        平均时间复杂度
            代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。

        均摊时间复杂度
        两个条件满足时使用：
            代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；
            低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。
































